name: Debug Cross-Platform Conda Build

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
      - '**' # Trigger on pushes to any branch (useful for debugging)
  pull_request: # Trigger on pull requests

jobs:
  build:
    name: Build (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Do not cancel other matrix jobs if one fails; allows full debugging output
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        # Explicitly define the Python versions you want to test.
        # Now set to only build with Python 3.10 as requested.
        python-version: ["3.10"] # Only build for Python 3.10

    # IMPORTANT: This defaults block ensures all 'run' steps use a login shell
    # which correctly picks up the conda initialization.
    defaults:
      run:
        # For Linux/macOS, use bash in login mode.
        # For Windows, GitHub Actions' default PowerShell usually handles this correctly,
        # but you can specify 'powershell' if needed for explicit control.
        shell: bash -l {0}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4 # Use the latest stable version of the checkout action

      - name: Print matrix variables for verification
        run: |
          echo "--- DEBUG: Matrix Variables ---"
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Matrix Python: ${{ matrix.python-version }}"

      - name: Set up Miniconda environment
        # Use v3 of setup-miniconda for the latest features and bug fixes.
        # It has improved shell initialization and robustness.
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ matrix.python-version }} # This should now only inject 3.10
          miniconda-version: "latest" # Always get the most recent Miniconda installer
          activate-environment: build # This tells setup-miniconda to create and activate an environment named 'build'
          auto-activate-base: false # Prevent automatic activation of the base environment
          auto-update-conda: true # Ensure conda is up-to-date within the Miniconda installation
          # `conda-init-shell` is still good practice, but `defaults.run.shell` is more critical
          # for ensuring subsequent steps use the initialized shell.
          conda-init-shell: bash # Explicitly initialize for bash shells on Linux/macOS

      # --- Extensive Debugging Steps ---

      - name: Debug - Print PATH and all environment variables
        run: |
          echo "--- DEBUG: Current PATH ---"
          echo "$PATH"
          echo "--- DEBUG: All Environment Variables ---"
          env | sort # Sort for easier readability

      - name: Debug - Verify Conda and Python installation
        run: |
          echo "--- DEBUG: Which conda executable is found? ---"
          which conda || echo "Error: 'conda' command not found in PATH."
          echo "--- DEBUG: Conda version ---"
          conda --version || echo "Error: 'conda --version' failed."
          echo "--- DEBUG: List of all Conda environments ---"
          conda env list || echo "Error: 'conda env list' failed."
          echo "--- DEBUG: Currently active Conda environment ---"
          conda info --envs | grep "*" || echo "No active environment indicated by 'conda info --envs'."
          echo "--- DEBUG: Which python executable is found? ---"
          which python || echo "Error: 'python' command not found in PATH."
          echo "--- DEBUG: Python version in current environment ---"
          python --version || echo "Error: 'python --version' failed."

      - name: Debug - Show Conda configuration and detailed info
        run: |
          echo "--- DEBUG: Conda Configuration ---"
          conda config --show
          echo "--- DEBUG: Detailed Conda Information ---"
          conda info

      - name: Debug - Check pre-installed packages in the active environment
        run: |
          echo "--- DEBUG: conda list before package installation ---"
          conda list

      # --- Conda Configuration and Package Installation ---

      - name: Configure conda-forge channel and install build tools
        run: |
          echo "--- INFO: Configuring conda channels and installing build tools ---"
          # Add conda-forge channel with highest priority
          conda config --add channels conda-forge
          # Add defaults channel (often implicitly included, but explicit doesn't hurt)
          conda config --add channels defaults
          # Set channel priority to flexible for better dependency resolution
          conda config --set channel_priority flexible
          # Use 'conda install' to install all necessary packages, including conda-build and mamba.
          # This resolves the "mamba not found" issue and ensures conda-build is installed.
          conda install -y numpy=1.22 conda-build boa mamba
          echo "--- DEBUG: conda list after package installation ---"
          conda list

      - name: Debug - Verify installed tools
        run: |
          echo "--- DEBUG: Verifying numpy, conda-build, boa, mamba versions ---"
          python -c "import numpy; print(f'Numpy version: {numpy.__version__}')" || echo "Numpy check failed."
          conda build --version || echo "conda-build check failed."
          boa --version || echo "boa check failed."
          mamba --version || echo "mamba check failed."

      # --- Build and Test Steps ---

      - name: Build package with mamba
        run: |
          echo "--- INFO: Building package with mamba ---"
          echo ">> Determining conda build output path"
          # Capture the output path for consistent use
          BUILD_OUTPUT_PATH=$(conda build recipe --output)
          echo "Build output path: $BUILD_OUTPUT_PATH"
          echo ">> Running mambabuild"
          # Now that mamba is installed, this command should work.
          # If you truly don't care about mamba, you could change this to `conda build recipe`
          # but `mambabuild` is often faster.
          mamba mambabuild recipe

      - name: Test built package
        run: |
          echo "--- INFO: Testing built package ---"
          # Retrieve the build output path again or pass it from the previous step if preferred
          TEST_PACKAGE_PATH=$(conda build recipe --output)
          echo "Testing package at: $TEST_PACKAGE_PATH"
          conda build --test "$TEST_PACKAGE_PATH" # Use quotes for paths with spaces


